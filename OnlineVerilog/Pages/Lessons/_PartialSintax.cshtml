
<div class="row">
    <div class="col-md-2"></div>
    <div class="col-md-8">
        <a href="1" style="float: right">Покретање првог задатка</a>
        <h1 class="naslov">Синтакса верилога </h1>
        <p>У Верилогу, модули су основне грађевинске блокове. Они су као функције у програмским језицима, али уместо да извршавају акције, они описују хардверску структуру. Синтакса за модул је следећа:</p>
        <pre><code>module ime_modula (ulazi, izlazi);
            input ulaz;
            output izlaz;

            // Декларација сигнала и логика модула
endmodule</code></pre>

        <p>Овде, <code>ime_modula</code> представља назив модула, а <code>ulazi</code> и <code>izlazi</code> су параметри који дефинишу улазе и излазе модула. Унутар модула, можете декларативно описивати сигнала и логичке операције.</p>
        <br />
        <hr />
        <br />
        <h2 class="naslov">Основни типови података у Верилогу</h2>
        <p>Верилог подржава неколико основних типова података, што је важно за дефинисање хардверских компоненти:</p>
        <ul>
            <li><code>wire</code>: Користи се за повезивање модула. Не може да чува вредности самостално.</li>
            <li><code>reg</code>: Користи се за складиштење вредности, а може се модификовати у секвенцијалним логичким операцијама.</li>
            <li><code>integer</code>: За целобројне вредности, корисно за бројчане операције.</li>
            <li><code>real</code>: За реалне (двојне) вредности, које су корисне у неким симулацијама.</li>
        </ul>

        <h6 class="naslov">Пример декларације типова:</h6>
        <pre><code>wire a;
reg b;
integer c;
real d;</code></pre>
        <br />
        <hr />
        <br />
        <h2 class="naslov">Оператори у Верилогу</h2>
        <p>Верилог подржава разне операторе који се користе за извршавање логичких и математичких операција:</p>
        <ul>
            <li>Логичке операторе: <code>&&</code>, <code>||</code>, <code>!</code>, који се користе за логичке операције.</li>
            <li>Битни оператори: <code>&</code>, <code>|</code>, <code>^</code>, <code>~</code>, који раде на битовима сигнала.</li>
            <li>Поређење: <code>==</code>, <code>!=</code>, <code>></code>, <code><</code>, <code>&gt;=</code>, <code>&lt;=</code>, који се користе за поређење вредности.</li>
        </ul>

        <h6 class="naslov">Пример коришћења оператора у логичкој операцији:</h6>
        <pre><code>assign y = a & b; // логичко И</code></pre>
        <br />
        <hr />
        <br />
        <h2 class="naslov">Контролне структуре у Верилогу</h2>
        <p>Контролне структуре у Верилогу, као што су условне конструкције и петље, сличне су онима у класичним програмским језицима. Оне су кључне за имплементацију сложене логике.</p>

        <h6 class="naslov">if-else конструкција:</h6>
        <pre><code>if (a == 1) begin
    // логика за услов
end else begin
    // логика за друго стање
end</code></pre>

        <h6 class="naslov">case конструкција:</h6>
        <pre><code>case (selector)
    2'b00: out = 4'b0000;
    2'b01: out = 4'b0001;
    default: out = 4'bxxxx;
endcase</code></pre>
        <br />
        <hr />
        <br />
        <h2 class="naslov">Догађаји у Верилогу</h2>
        <p>Догађаји су важан аспект Верилога, јер се користе у <code>always</code> блоковима да означе услове под којима ће се логика извршити. Овде су објашњени неки од кључних догађаја:</p>

        <ul>
            <li><code>posedge</code>: Означава да ће логика унутар <code>always</code> блока бити активна на позитивној ивици сигнала. То значи да ће се блок извршити када сигнал пређе из нуле у један.</li>
            <pre><code>always @@(posedge clk) begin
    q <= d; // активација на позитивној ивици
end</code></pre>

            <li><code>negedge</code>: Означава да ће логика бити активна на негативној ивици сигнала, односно када сигнал пређе из један у нулу.</li>
            <pre><code>always @@(negedge reset) begin
    q <= 0; // активација на негативној ивици
end</code></pre>

            <li><code>*</code>: Користи се за означавање свих промена на сигналу, без обзира на то да ли је позитиван или негативан иљ. Ово је корисно за чување стања или обраду свих догађаја.</li>
            <pre><code>always @@(posedge clk or *) begin
    "//активација на позитивној ивици или другим променама"
end</code></pre>
        </ul>
        <a href="1" style="float: right">Покретање првог задатка</a>
    </div>
    <div class="col-md-2"></div>
</div>
