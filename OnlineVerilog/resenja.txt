*************************
nula
module topmodule(output y);
	assign = 0;
endmodule
*************************
zica
module topmodule(input a, output y);
	assign y = a;
endmodule
**************************
3zice
module topmodule(input a, b, c, output w, x, y, z);
    assign w = a;
    assign x = b;
    assign y = b;
    assign z = c;
endmodule
**************************
negacija
module topmodule(input a, output y);
	assign y = ~a;
endmodule
**************************
i kolo
module topmodule(input a, b, output y);
   assign y = a & b;
endmodule
**************************
ili kolo
module topmodule(input a, b, output y);
   assign y = a | b;
endmodule
**************************
polusabirac
module topmodule( 
    input a, b,
    output cout, sum );
	
    assign sum  = a^b;
    assign cout = a&b;
        
endmodule
**************************
sabirac
module topmodule( 
    input a, b, cin,
    output cout, sum );
    
	assign cout = a&b | b&cin | a&cin;
	assign sum  = a^b^cin;
endmodule
**************************
sabirac4
module topmodule( 
    input [3:0] a, b,
    input cin,
    output [3:0] cout,
    output [3:0] sum );

    FA FA1(a[0],b[0],cin,cout[0],sum[0]);
    FA FA2(a[1],b[1],cout[0],cout[1],sum[1]);
    FA FA3(a[2],b[2],cout[1],cout[2],sum[2]);
    FA FA4(a[3],b[3],cout[2],cout[3],sum[3]);
    
endmodule

module FA( 
    input a, b, cin,
    output cout, sum );
    
	assign cout = a&b | b&cin | a&cin;
	assign sum  = a^b^cin;
endmodule
**************************
multipleker2-1
module topmodule( 
    input a, b, sel,
    output out ); 
	
    assign out  = sel?b:a;
endmodule
**************************
mux 4-1
module topmodule( 
    input[2:0] a, b, c, d,
    input [1:0] sel,
    output reg[2:0] out );

always @ * begin
  
        case (sel)
            2'b00 : out = a; 
            2'b01 : out = b;
            2'b10 : out = c;
            2'b11 : out = d;
            default : out = {3{1'b1}};
        endcase
    end
endmodule  
**************************
prioritetni enkoder
module topmodule (
    input [3:0] in,
    output reg [1:0] pos  );
    always @(*) begin
        if (in[0]==1'b1)
            pos = 0;
        else if (in[1]==1'b1)
            pos = 1;
        else if (in[2]==1'b1)
            pos = 2;
        else if (in[3]==1'b1)
            pos = 3;
        else
            pos = 0;
    end
endmodule
**************************
vektor
module topmodule(input[2:0] a, output x, y, z);
    assign x = a[2];
    assign y = a[1];
    assign z = a[0];
endmodule
****************************
poluvektor
module topmodule( 
    input  [15:0] in,
    output  [7:0] out_hi,
    output  [7:0] out_lo );
    
    assign out_hi = in[15:8];
    assign out_lo = in[7:0];
endmodule
*****************************
vektor logicka kola
module topmodule( 
    input [2:0] in,
    output out_and,
    output out_or,
    output out_xor
);
    
    assign out_and = in[2] && in[1] && in[0];
    assign out_or = in[2] || in[1] || in[0];
    assign out_xor =in[2] ^ in[1] ^ in[0];

endmodule
*****************************
spajanje
module topmodule (
    input [4:0] a, b, c, d, e, f,
    output [7:0] w, x, y, z );
    
    wire [31:0] concat_reg; 
    assign concat_reg = {a[4:0], b[4:0], c[4:0], d[4:0], e[4:0], f[4:0], 2'b11};
    assign w = concat_reg[31:24];
    assign x = concat_reg[23:16];
    assign y = concat_reg[15:8];
    assign z = concat_reg[7:0];

endmodule
********************************
obrnut redosled
module topmodule( 
    input [7:0] in,
    output [7:0] out
);
    assign out = {in[0],in[1],in[2],in[3],in[4],in[5],in[6],in[7]};
endmodule
********************************
prosirivanje
module topmodule( 
    input [7:0] in,
    output [31:0] out
);
    assign out = { {24{in[7]}} , in[7:0] };
endmodule
********************************
dvobitno poredjenje
module topmodule(input [1:0] a, b, output y);
 assign y = (a == b);
endmodule
********************************
ponovljene jedinice
module topmodule( 
    input [2:0] in,
    output reg [1:0] out );
    integer i,count;
	always @ * begin
        count = 0;
        for (i=0; i<3;i=i+1) begin
            if (in[i]==1'b1) count=count+1;
        end
        out = count;
    end
endmodule
*********************************
termostat
module topmodule (
    input too_cold,
    input too_hot,
    input mode,
    input fan_on,
    output heater,
    output aircon,
    output fan
); 
	assign heater = mode && too_cold;
    assign aircon = (~mode) && too_hot;
    assign fan    = aircon || heater || fan_on;
endmodule
********************************
tastaturamodule topmodule (
    input [15:0] scancode,
    output reg left,
    output reg down,
    output reg right,
    output reg up  ); 
	
    always @ (scancode) begin
        up = 1'b0; down = 1'b0; left = 1'b0; right = 1'b0;
        case (scancode)
            16'he06b:begin
                up = 1'b0; down = 1'b0; left = 1'b1; right = 1'b0;
            end
            16'he072:begin
                up = 1'b0; down = 1'b1; left = 1'b0; right = 1'b0;
            end
            16'he074:begin
                up = 1'b0; down = 1'b0; left = 1'b0; right = 1'b1;
            end
            16'he075:begin
                up = 1'b1; down = 1'b0; left = 1'b0; right = 1'b0;
            end
                
        endcase
    end
endmodule
******************************
km1
module topmodule(
    input a,
    input b,
    input c,
    output out  ); 
    assign out = a&(~b)&(~c) | c | b&(~c);
endmodule
********************************
km2
module topmodule(
    input a,
    input b,
    input c,
    input d,
    output out  ); 
	
    assign out = (c|!d|!b) & (!a|!b|c) & (a|b|!c|!d) & (!a|!c|d);
endmodule
************************************